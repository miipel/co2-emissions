{"version":3,"sources":["services/emissions.js","services/populations.js","components/tableRow.js","components/emissionsTable.js","App.js","serviceWorker.js","index.js"],"names":["emissions","axios","get","then","response","data","populations","tableRow","props","react_default","a","createElement","locationKey","location","year","population","EmissionsTable","state","sortByEmissions","b","arg1","arg2","_this2","this","emissionsData","sort","map","entry","id","components_tableRow","key","bloomer_min","isBordered","isStriped","Component","App","sortByPopulation","combineArrays","array1","array2","array1Values","Object","values","array2Values","merged","_","merge","keys","i","emissionsService","setState","populationService","testData","limited","slice","console","log","isFluid","style","marginTop","padding","isSize","type","placeholder","emissionsTable","Array","from","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2d01940.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/emissions'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nexport default { getAll }","import axios from 'axios'\nconst baseUrl = '/api/population'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nexport default { getAll }","import React from 'react'\n\nconst tableRow = (props) => (\n  <tr>\n    <td>{props.locationKey}</td>\n    <td>{props.location}</td>\n    <td>{props.year}</td>\n    <td>{props.emissions}</td>\n    <td>{props.population}</td>\n  </tr>\n)\n\nexport default tableRow","import React, { Component } from 'react'\nimport { Table } from 'bloomer'\n\nimport TableRow from './tableRow'\n\nclass EmissionsTable extends Component {\n  state = {\n    sortByEmissions: true\n  }\n\n  sortByEmissions(a, b, sortByEmissions) {\n    const arg1 = a.population\n    const arg2 = b.population\n    if(sortByEmissions) {\n      return arg2 - arg1\n    } else {\n      return arg1 - arg2\n    }\n  }\n\n  render() {\n    const emissionsData = this.props.data.sort(\n      (a, b) => this.sortByEmissions(a, b, this.state.sortByEmissions)\n    )\n      .map((entry, id) => {\n        return <TableRow\n          key={id}\n          locationKey={entry.key}\n          location={entry.location}\n          year={entry.year}\n          emissions={entry.emissions}\n          population={entry.population} />\n      })\n\n    return (\n      <Table isBordered isStriped>\n        <thead>\n          <tr>\n            <th>Key</th>\n            <th>Location</th>\n            <th>Year</th>\n            <th>Emissions</th>\n            <th>Population</th>\n          </tr>\n        </thead>\n        <tbody>\n          {emissionsData}\n        </tbody>\n      </Table >\n    )\n  }\n}\n\nexport default EmissionsTable","import React, { Component } from 'react';\nimport 'bulma/css/bulma.css'\nimport { Container, Box, Title, Input, Checkbox, Content } from 'bloomer';\nimport _ from 'lodash'\n\nimport emissionsService from './services/emissions'\nimport populationService from './services/populations'\nimport EmissionsTable from './components/emissionsTable'\n\nclass App extends Component {\n  state = {\n    emissions: {},\n    populations: {},\n    data: {},\n    sortByEmissions: true,\n    sortByPopulation: false\n  }\n\n  componentDidMount() {\n    emissionsService.getAll().then(response => {\n      this.setState({ emissions: response })\n    })\n    populationService.getAll().then(response => {\n      this.setState({ populations: response })\n    })\n  }\n\n  // FIXME: This could be done in the back end\n  combineArrays = (array1, array2) => {\n    let array1Values = Object.values(array1)\n    let array2Values = Object.values(array2)\n    let merged = _.merge({}, array1Values, array2Values)\n    return Object.keys(merged).map((i) => {return merged[i]})\n  }\n\n  render() {\n    let testData = this.combineArrays(this.state.populations, this.state.emissions)\n    let limited = testData.slice(0, 500)\n    console.log(testData)\n\n    return (\n      <Container isFluid style={{ marginTop: '20px', padding: '60px' }}>\n        <Container >\n          <Title isSize={3}>Emissions tracker</Title>\n          <Input type=\"text\" placeholder='Country name' />\n        </Container>\n        <Container style={{ padding: '5px' }}>\n          <Checkbox> Population </Checkbox>\n          <Checkbox> Emissions </Checkbox>\n        </Container>\n        <Container>\n          <Box>\n            <Content>\n              <EmissionsTable data={Array.from(limited)} />\n            </Content>\n          </Box>\n        </Container>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}